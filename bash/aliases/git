#See http://mislav.uniqpath.com/2010/07/git-tips/
alias ungit="find . -name '.git' -exec rm -rf {} \;"

alias ga='git add'
alias gaa='git add .'
alias gb='git br'
alias gba='git branch -a'
alias gca='git commit -v -a'
alias gcam='git commit --amend'
alias gcf='git diff --name-only | uniq | xargs subl'

# Commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}

# Commit pending changes and quote all args as message without add
function gc() {
    git commit -v -m "$*"
}

# As above, except don't add
function gc() {
    git commit -v -m "$*"
}
#Doesn't work as git must take files as arguments

function glg() {
	if [ -z "$1" ]; then
		git log --oneline --decorate --graph --date=short
	else
		if is_integer $1; then
			git log --oneline --decorate --graph --date=short -n$1 $2
		else
			git log --oneline --decorate --graph --date=short $@
		fi
	fi
}

function is_integer() {
    printf "%d" $1 > /dev/null 2>&1
    return $?
}

alias gco='git checkout'
alias gd='git diff HEAD'
alias gdmt='git diff HEAD | subl &'

alias gpl='git pull'
alias gpr='git pull --rebase'
alias gps='git push'
alias gpf='git push -f'
alias gf='git fetch'

alias gr='git rebase'
alias grc='git rebase --continue'
alias grs='git rebase --skip'
alias gra='git rebase --abort'

alias gst='git st'
alias gt='git st'
alias g='git st'

alias gig='subl -w .gitignore'
alias eg='subl .git/config'

function gs() {
	git show $1
}

alias grm='git rm'

#Git stash
alias gsl='git stash list'

alias gsd='git stash drop'
alias gsp='git stash pop'
alias gss='git stash save'

function gsw() {
	if [ -z "$1" ]; then
		git stash show stash@{0} -p
	else
		git stash show stash@{$1} -p
	fi
}

function hadouken() {
	if [ -z "$2" ]; then
		if [ -z "$1" ]; then
			git push production master
		else
			git push production +$1:master
		fi
	else
		git push $2 +$1:master
	fi
}
alias gk='$(/usr/bin/wish > /dev/null 2>&1 $(which gitk) --all &)'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}
alias gcl='git clone'

# Setup a tracking branch from [remote] [branch_name]
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}
# Quickly clobber a file and checkout
function grf() {
  rm $1
  git checkout $1
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

# http://stackoverflow.com/a/2003515
function gbd() {
  git push origin --delete $1
  git branch -d $1
}

function gfind() {
	git rev-list -n 1 HEAD -- $1
}

function grestore() {
	git checkout $(gfind $1)^ -- $1
}
